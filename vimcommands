************** Interesting website encountered **********

https://www.davidpashley.com/articles/writing-robust-shell-scripts/


************** Vim Tutorial ******

Prompt Meaning
$ Enter the command line in an external shell
: Use Command-Line mode to execute an Ex command
/ Use Command-Line mode to perform a forward search
? Use Command-Line mode to perform a backward search
= Use Command-Line mode to evaluate a Vim script expression

###################  Tip 1 : Meet the Dot Command

.  	- repeat
u 	- undo 
dd 	- delete 
>G	- indent 
==	- format
j,j.	- next line and indent ,repeat last action end of line 


$a - End Insert 
j$ - next line end 
A- append end if current line 
j. - repeat last action end of line 

$, 0, and ^ to move to line endpoints and then use w and b. Also, adding a numeric argument to w and b can accelerate the process

Note: Opening multiple files in VIM 

:n -> Move to next file
:N -> Move to previous file
:h or :help --> then move to a word press - ctrl -] to jump to a Corresponding word or Ctrl-T to move back again to the original file.
:bf            # Go to first file.
:bl            # Go to last file
:bn            # Go to next file.
:bp            # Go to previous file.
:bw            # Close file.



###################  Tip 2 - Don’t Repeat Yourself - dot and ; commands

A instead of $a;
. 	- repeat 
; 	- goto the same line when search
;. 	- got the next execution and do repeat command.

Two for the price of One : Compound Command Equivalent in Longhand

C c$
s cl
S ^C
I ^i
A $a
o A<CR>

Note: Delete line or Word in command line 
Ctrl+U -   Clear Up to the Beginning
Ctrl+W -   delete a word backward
Ctrl+K -   Delete a work forward
Ctrl+Backspace - Undo
Ctrl+A - goto the beginning
Ctrl+Y - recall deleted command 
Ctrl+L - To Clear entire command prompt 

Ctrl+ XX - Toggle bewteen start of line and current cursor.

Note: Useful link - https://www.cs.swarthmore.edu/help/vim/makefiles.html


###################  Tip 3 - Take One Step Back, Then Three Forward

Open file with search pattern : 

vi +/searchterm filename

f{char} - search a character while in VIM
; - repeat the same search


Note: Search

For basic searching:

/pattern       - search forward for pattern
?pattern       - search backward
n              - repeat forward search
N              - repeat backward

Some variables you might want to set:

:set ignorecase - case insensitive
:set smartcase  - use case if any caps used 
:set incsearch  - show match as search proceeds
:set hlsearch   - search highlighting

More cool searching tricks:

*               - search for word currently under cursor
g*              - search for partial word under cursor 
                  (repeat with n)
ctrl-o, ctrl-i  - go through jump locations
[I              - show lines with matching word under cursor

Search and replace

:%s/search_for_this/replace_with_this/    - search whole file and replace
:%s/search_for_this/replace_with_this/c   - confirm each replace



###################  Tip 4- Act ,Repeat,Reverse


Intent 					Act 		Repeat 		Reverse
Make a change 				{edit} 			. 	u
Scan line for next character 		f{char}/t{char} 	; 	,
Scan line for previous character 	F{char}/T{char} 	; 	,
Scan document for next match 		/pattern<CR> 		n 	N
Scan document for previous match 	?pattern<CR> 		n 	N
Perform substitution 			:s/target/replacement 	& 	u
Execute a sequence of changes 		qx{changes}q 		@x 	u



Tip-5 Find and Replace by Hand
******************************

:%s/content/copy/g

Be Lazy: Search Without Typing

cw 	command deletes to the end of the word

Keystrokes
{start} 	...We're waiting for content before the site can go live...
* 		...We're waiting for content before the site can go live...
cwcopy<Esc> 	...We're waiting for content before the site can go live...
n 		...We're waiting for content before the site can go live...
. 		...We're waiting for copy before the site can go live...


************Delete Forward ******

dbx, bdw, and daw.

d2w and 2dw will delete two words.

d{motion},c{motion},y{motion}

dl - delete character
daw - delete a word.
dap - dlete entire paragraph

*********************** Extending vim's 
\\{motion}
\\ap - toggle commneting for the current paragraph.
\\G comments to the end of line

***** Autoindent 
gg=G  -- to jump top and autoindent everytinh 
\\ae would toggle commenting throughout the current file.


******************* Insert Mode ***************
C-h	Delete back one character
C-w	Delete back one work
C-u 	Delete back to start of line



************ Duplicate the line and change it *************

yyp 			.blog, .news { background-image: url(/sprite.png); }
cW.news<Esc> 		.blog, .news { background-image: url(/sprite.png); }
180<C-x> 		.blog, .news { background-image: url(/sprite.png); }

********************* 

<C-r>{register}  - command is convenient for pasting a few words 
<C-r><C-p>{register} - command is smarter 
<C-r>=. From Insert mode we can access it by typing 
A 6 chairs, each costing $35, totals $
<C-r>=6*35<CR> 6 chairs, each costing $35, totals $210



************** Visual Mode  ********

Command Effect
v Enable character-wise Visual mode
V Enable line-wise Visual mode
<C-v> Enable block-wise Visual mode
gv Reselect the last visual selection

**************** Switching between Visual Modes

Command Effect
<Esc> / Switch to Normal mode
<C-[>
Switch to Normal mode (when used from character-, line- or
block-wise Visual mode, respectively)
v / V /
<C-v>
v Switch to character-wise Visual mode
V Switch to line-wise Visual mode
<C-v> Switch to block-wise Visual mode
o Go to other end of highlighted text

Repeat Line-Wise Visual Commands - 22

Prefer Operators to Visual Commands Where Possible - 23

Edit Tabular Data with Visual-Block Mode - 24

Change Columns of Text - 25

Append After a Ragged Visual Block - 

Keystrokes Buffer Contents
{start} var foo = 1
	var bar = 'a'
Normal mode var foobar = foo + bar

<C-v>jj$ var foo = 1
var bar = 'a'
Visual-Block var foobar = foo + bar

A; var foo = 1;
var bar = 'a'

Insert mode var foobar = foo + bar
<Esc> var foo = 1;
var bar = 'a';
Normal mode var foobar = foo + bar;


******** Recal lHistory ***********

Ctrl-R -  To recall History 
q:  	-Change the History of command line 
q/ Open the command-line window with history of searches
q: Open the command-line window with history of Ex commands
ctrl-f Switch from Command-Line mode to the command-line window


Run Commands in the Shell - 35
:!ls
:shell
ls            -- 
exit  -- kills the shell and returns to vim.

Ctrl-z suspends the process that’s running Vim and returns control to bash.


*************Using the contents of a buffer for standard Input or Output.***********

:read !{cmd} command lets us direct standard output into a buffer.
:write !{cmd} does the inverse


 :write !sh
 :write ! sh
 :write! sh

********** filtering the contents of a buffer throught External Command*******

:!{cmd} command takes on a different meaning when it’s given a range

 :2,$!sort -t',' -k2


Command Effect
:shell 				Start a shell (return to Vim by typing exit)
:!{cmd} 			Execute {cmd} with the shell
:read !{cmd}			Execute {cmd} in the shell and insert its standard output
				below the cursor

:[range]write !{cmd}		Execute {cmd} in the shell with [range] lines as standard
				input

:[range]!{filter} 		Filter the specified [range] through external program {filter}


***************** Files **********************
36. Track Open Files with the Buffer List

:ls - list
:bnext - next 
Toggle - CTRL-^
:buffer N - N line Number 

:bdelete N1 N2 N3
:N,M bdelete



:bufdo command allows us to execute an Ex comand.

nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

Command Effect
<C-w>s 			Split the current window horizontally, reusing the current buffer in the new window
			Split the current window vertically, reusing the current buffer in the new window
<C-w>v 			Split the current window horizontally, loading {file} into the new window
:sp[lit] {file}  	Split the current window vertically, loading {file} into the new window


Changing the Focus Between Windows
Command Effect
<C-w>w Cycle between open windows
<C-w>h Focus the window to the left
<C-w>j Focus the window below
<C-w>k Focus the window above
<C-w>l Focus the window to the right

Ex Command Normal Command Effect

:cl[ose] <C-w>c Close the active window

:on[ly] <C-w>o Keep only the active window, closing all others


Keystrokes Buffer Contents

<C-w>= 			Equalize width and height of all windows
<C-w>_ 			Maximize height of the active window
<C-w>| 			Maximize width of the active window
[N]<C-w>_ 		Set active window height to [N] rows
[N]<C-w>| 		Set active window width to [N] columns



Command Effect
:tabe[dit] {filename} 		Open {filename} in a new tab
<C-w>T 				Move the current window into its own tab
:tabc[lose] 			Close the current tab page and all of its windows
:tabo[nly] 			Keep the active tab page, closing all others


Ex Command Normal Command Effect
:tabn[ext] {N} 	{N}gt 	Switch to tab page number {N}
:tabn[ext] gt 		Switch to the next tab page
:tabp[revious] gT 	Switch to the previous tab page


Open a File by Its Filepath Using ‘:edit’ - 41

:edit lib/framework.js

:edit %<Tab>

:edit %:h<Tab>      -- shorthand for the filepath of the active buffer

:edit %:h<Tab>M<Tab>

Easy Expansion of the Active File Directory :

Try sourcing this line in your vimrc file:
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'


Open a File by Its Filename Using ‘:find’ Tip -42 

Configure path :
:set path+=app/**


Explore the File System with netrw    Tip -43

set nocompatible
filetype plugin on


Saving files to non existent Directories
****************************************

:edit madeup/dir/doesnotexist.yet
:write

:!mkdir -p %:h
:write


Save a File as the Super User 

$ ls -al /etc/ | grep hosts

$ whoami

$ vim /etc/hosts

:write

:write!

:w !sudo tee % > /dev/null


Keep Your Fingers on the Home Row 
*********************************
j 	Down one real line
gj 	Down one display line
k 	Up one real line
gk 	Up one display line
0 	To first character of real line
g0 	To first character of display line
^ 	To first nonblank character of real line
g^ 	To first nonblank character of display line
$ 	To end of real line
g$ 	To end of display line


Note the pattern: j, k, 0, and $ all interact with real


Move Word-Wise 

Command Move Cursor

w 		Forward to start of next word
b 		Backward to start of current/previous word
e 		Forward to end of current/next word
ge 		Backward to end of previous word


Keystrokes Buffer Contents

{start} 		Go fast.
eaer<Esc> 		Go faster.

Keystrokes Buffer Contents
{start} 	e.g. we're going too slow
W e.g. 		we're going too slow
W e.g. 		we're going too slow


Keystrokes Buffer Contents
{start} e.g. we're going too slow
cwyou<Esc> e.g. you're going too slow



Keystrokes Buffer Contents
{start} e.g. we're going too slow
cWit's<Esc> e.g. it's going too slow


Find by Character - 49
*******************************
Keystrokes Buffer Contents
{start} 	Find the first occurrence of {char} and move to it.
fx 		Find the first occurrence of {char} and move to it.
fo 		Find the first occurrence of {char} and move to it.

Keystrokes Buffer Contents

{start} 		Find the first occurrence of {char} and move to it.
fc 			Find the first occurrence of {char} and move to it.
; 			Find the first occurrence of {char} and move to it.
; 			Find the first occurrence of {char} and move to it.
; 			Find the first occurrence of {char} and move to it.

Keystrokes Buffer Contents
{start} 		Find the first occurrence of {char} and move to it.
fo 			Find the first occurrence of {char} and move to it.
;;			Find the first occurrence of {char} and move to it.
, 			Find the first occurrence of {char} and move to it.


Keystrokes Buffer Contents
{start} 	I've been expecting you, Mister Bond.
f, 		I've been expecting you, Mister Bond.
dt. 		I've been expecting you.


Think Like a Scrabble
Search to Navigate




v 		This phrase takes time but
		eventually gets to the point.
/ge<CR> 	This phrase takes time but eventually gets to the point.
h 		This phrase takes time but eventually gets to the point.
d 		This phrase gets to the point.



Trace Your Selection with Precision Text Objects

var tpl = [
'<a href="{url}">{title}</a>'
]


Text Object Selection
a) or ab A pair of (parentheses)
i) or ib Inside of (parentheses)
a} or aB A pair of {braces}
i} or iB Inside of {braces}
a] A pair of [brackets]
i] Inside of [brackets]
a> A pair of <angle brackets>
i> Inside of <angle brackets>
a’ A pair of 'single quotes'
i’ Inside of 'single quotes'
a" A pair of "double quotes"
i" Inside of "double quotes"
a` A pair of `backticks`
i` Inside of `backticks`
at A pair of <xml>tags</xml>
it Inside of <xml>tags</xml>

Delete around a or change inside 


iw Current word
aw Current word plus one space
iW Current WORD
aW Current WORD plus one space
is Current sentence
as Current sentence plus one space
ip Current paragraph
ap Current paragraph plus one blank line

Keystrokes Buffer Contents
{start} 		Improve your writing by deleting excellent adjectives.
daw 			Improve your writing by deleting adjectives.

{start} 		Improve your writing by deleting excellent adjectives.
ciwmost<Esc> 		Improve your writing by deleting most adjectives.

`` 	Position before the last jump within current file
`. 	Location of last change
`^ 	Location of last insertion
`[ 	Start of last change or yank
`] 	End of last change or yank
`< 	Start of last visual selection
`> 	End of last visual selection

Jump Between Matching Parentheses - tip 54 

{start} console.log([{'a':1},{'b':2}])
% console.log([{'a':1},{'b':2}])
h console.log([{'a':1},{'b':2}])
% console.log([{'a':1},{'b':2}])
l console.log([{'a':1},{'b':2}])
% console.log([{'a':1},{'b':2}])

cities = %w{London Berlin New\ York}


{start} cities = %w{London Berlin New\ York}
dt{ cities = {London Berlin New\ York}
% cities = {London Berlin New\ York}
r] cities = {London Berlin New\ York]
`` cities = {London Berlin New\ York]
r[ cities = [London Berlin New\ York]

set nocompatible
filetype plugin on
runtime macros/matchit.vim


Surround VIm;
*************

{start} cities = ["London", "Berlin", New York]
vee cities = ["London", "Berlin", New York]
S" cities = ["London", "Berlin", "New York"]


Traverse the Jump List - 

:jumps

[count]G 				Jump to line number
//pattern<CR>/?pattern<CR>/n/N 		Jump to next/previous occurrence of pattern
% 					Jump to matching parenthesis
(/) 					Jump to start of previous/next sentence
{/} 					Jump to start of previous/next paragraph
H/M/L 					Jump to top/middle/bottom of screen
gf 					Jump to file name under the cursor
<C-]> 					Jump to definition of keyword under the cursor
’{mark}/`{mark} 			Jump to a mark


Traverse the Change List

:changes

Using the g; and g, commands, we can traverse backward and forward through the change list


The `. mark always references the position of the last change

`^ mark tracks the position of the cursor the last time that Insert  mode was stopped 

The `., on the other hand, will always take us to the last item in the change list.


Jump to the Filename Under the Cursor  - 57  
**************************************


vim -u NONE -N practical_vim.rb


:set suffixesadd+=.rb

:set path?

path=.,/usr/include,,

:vimgrep /fooBar/ **


Snap Between Files Using Global Marks
*********************************
A global mark is a kind of bookmark that allows us to jump between files.

Global marks can be especially useful when we need to browse through a set of files and then quickly snap back to where we started.

:vimgrep /fooBar/ **

we can use the <C-o> command to get back to where we were prior to running :vimgrep.

mM command before invoking :vimgrep

snap back in one move with the `M command

Delete, Yank, and Put with Vim’s Unnamed Register -59 
**********************************************************
F Practica lvim
x Practicalvim
p Practical vim

start} 2) line two
	1) line one
	3) line three
dd 	1) line one
	3) line three
p 	1) line one
	2) line two
	3) line three

Duplicating Lines
*******************
yyp 	1) line one
	2) line two
	2) line two


collection = getCollection();

process(somethingInTheWay, target);



yiw 		collection = getCollection();
		process(somethingInTheWay, target);
jww 		collection = getCollection();
		process(somethingInTheWay, target);
diw 		collection = getCollection();
		process(, target);
P 		collection = getCollection();
		process(somethingInTheWay, target);

Grok Vim’s Registers


Keystrokes Buffer Contents
yiw collection = getCollection();
process(somethingInTheWay, target);
jww collection = getCollection();
process(somethingInTheWay, target);
diw collection = getCollection();
process(, target);
"0P collection = getCollection();
process(collection, target);

:reg "0
--- Registers ---
"" somethingInTheWay
"0 collection



"ayiw collection = getCollection();
process(somethingInTheWay, target);
jww collection = getCollection();
process(somethingInTheWay, target);
diw collection = getCollection();
process(, target);
"aP collection = getCollection();

************************ 

yiw 	collection = getCollection();
	process(somethingInTheWay, target);
jww 	collection = getCollection();
	process(somethingInTheWay, target);
"_diw 	collection = getCollection();
	process(, target);
P 	collection = getCollection();
	process(collection, target);





"% Name of the current file
"# Name of the alternate file
". Last inserted text
": Last Ex command
"/ Last search pattern


yiw collection = getCollection();
process(somethingInTheWay, target);
jww collection = getCollection();
process(somethingInTheWay, target);
ve collection = getCollection();
process(somethingInTheWay, target);
p collection = getCollection();
process(collection, target);





{start} I like chips and fish.
fc I like chips and fish.
de I like and fish.
mm I like and fish.
ww I like and fish.
ve I like and fish.
p I like and chips.
`m I like and chips.
P I like fish and chips.



yiw collection = getCollection();
process(somethingInTheWay, target);
jww collection = getCollection();
process(somethingInTheWay, target);
ciw<C-r>0<Esc> collection = getCollection();
process(collection, target);



$ vim -u NONE -N


:set autoindent


[1,2,3,4,5,6,7,8,9,10].each do |n|
if n%5==0
puts "fizz"
else
puts n
end
end


Normalize, Strike, Abort  - 65 

Play Back with a Count - 66


{start} x = "("+a+","+b+","+c+","+d+","+e+")";
f+ x = "("+a+","+b+","+c+","+d+","+e+")";
s + <Esc> x = "(" + a+","+b+","+c+","+d+","+e+")";
qq;.q x = "(" + a + ","+b+","+c+","+d+","+e+")";
22@q x = "(" + a + "," + b + "," + c + "," + d + "," + e + ")";




command repeats the f+ search.


{start} x = "("+a+","+b+","+c+","+d+","+e+")";
f+ x = "("+a+","+b+","+c+","+d+","+e+")";
s + <Esc> x = "(" + a+","+b+","+c+","+d+","+e+")";
qq;.q x = "(" + a + ","+b+","+c+","+d+","+e+")";
22@q x = "(" + a + "," + b + "," + c + "," + d + "," + e + ")";




Keystrokes Buffer Contents
qa 1. one
2. two
0f. 1. one
2. two
r) 1) one
2. two
w~ 1) One
2. two
j 1) One
2. two
q 1) One
2. two




Tip -67 Repeat a Change on Contiguous Lines



Tip-69 Act Upon a Collection of Files



Tip -70 Evaluate an Iterator to Number Items in a List

******************  Indentation 
 Some variables you might want to set:

 :set tabstop 8     - tabs are at proper location
 :set expandtab     - don't use actual tab character (ctrl-v)
 :set shiftwidth=4  - indenting is 4 spaces
 :set autoindent    - turns it on
 :set smartindent   - does the right thing (mostly) in programs
 :set cindent       - stricter rules for C programs

I like having auto on, but smart does funny things based on keywords.
To indent the current line, or a visual block:
ctrl-t, ctrl-d  - indent current line forward, backwards  (insert mode)
visual > or <   - indent block by sw (repeat with . )

To stop indenting when pasting with the mouse, add this to your .vimrc:
:set pastetoggle=<f5>

then try hitting the F5 key while in insert mode (or just :set paste). 

****************************** Reformatting **********************
reformatting
These are useful to reformat text paragraphs or chunks of code:

    V=  - select text, then reformat with =
    =   - will correct alignment of code
    ==  - one line; 
    gq  - reformat paragraph

Options to change how automatic formatting is done:

    :set formatoptions (default "tcq")
        t - textwidth
        c - comments (plus leader -- see :help comments)
        q - allogw 'gq' to work
        n - numbered lists
        2 - keep second line indent
        1 - single letter words on next line
        r - (in mail) comment leader after 

Other related options:

    :set wrapmargin
    :set textwidth
	
******************************* Marking *********************
markers
Use markers to set places you want to quickly get back to, or to specify a block of text you want to copy or cut.

 mk      - mark current position (can use a-z)
 'k      - move to mark k
 d'k     - delete from current position to mark k
 'a-z    - same file
 'A-Z    - between files

A straight tick ' refers to the line, use a backtick ` to also include the column. 	
	
************************* Folding ****************************
Note : https://www.unix.com/unix-for-beginners-questions-and-answers/132518-vim-tips-tricks.html

folding
Use folds to collapse selected blocks. Useful if you've finished a subroutine and want to save window space, or maybe want to fold all blocks of comments.
    select block, then :fold
    zo - open
    zc - close
If we want to folding some few lines in vim file:

First select the lines after type :fold

The selected line is folded.
If we want to open the folded lines use "zo".
If we want to close the folding lines use zc".

zR Unfold all folded lines in file.
za Open/close (toggle) a folded group of lines.
zA Open a closed fold or close an open fold recursively.
zc Close a folded group of lines.
zC Close all folded lines recursively.
zd Delete a folded line.
zD Delete all folded lines recursively.
zE Eliminate all folded lines in file.
zF Create "N" folded lines.	

******************** Word and Line completion ******************

ctrl-n, ctrl-p    - next/previous word completion (similar word in current file)
ctrl-x ctrl-l (ctrl-n/p)    	- line completion
:set dictionary=/usr/share/dict/words
ctrl-x ctrl-k     				- dictionary completion
ctrl-w      					- erases word (insert mode ...)
ctrl-u      					- erases line  ...or on command line)


******************** VIM command line *************************

vim + file_name

+ it will place the cursor at end of the after opening.
+n it will place the cursor at nth line of the file.

Ex: vim +3 fine_name it place the cursor at 3rd line of the file.

vim +/pattern filename

+/pattern ( vim +/hi filename). the cursor is first occurrence of the pattern line

+n/pattern ( vim +3/hi filename) cursor is nth occurrence of the line.

if you want to search a pattern like "Welcome to vim", see the following examples.

****************** Multiple Windows ***************************

multiple windows

If you want, you can probably do everything from one vim session! :) Here are some commands to turn one vim session (inside one xterm) into multiple windows.

 :e filename      - edit another file
 :split filename  - split window and load another file
 ctrl-w up arrow  - move cursor up a window
 ctrl-w ctrl-w    - move cursor to another window (cycle)
 ctrl-w_          - maximize current window
 ctrl-w=          - make all equal size
 10 ctrl-w+       - increase window size by 10 lines
 :vsplit file     - vertical split
 :sview file      - same as split, but readonly
 :hide            - close current window
 :only            - keep only this window open
 :ls              - show current buffers
 :b 2             - open buffer #2 in this window

****************** Delete/Cut/paste***********************
 d^ : Deletes from current cursor position to the beginning of the line.
d$ : Deletes from current cursor position to the end of the line.
dw : Deletes from current cursor position to the end of the word.
dd : Deletes three lines from current cursor position downwards.(also :d)
yy : Yank the current line (also :y)
x : Delete a character next to the cursor
X : Delete character to the left of cursor
P : Paste line before the cursor
p : Paste line after the cursor
. : Repeat last edit command
u : Undo last edit (Ctrl+r redo)
U : Undo changes to current line
J : Join two lines

In Escape mode: C is delete the line from under the cursor to end of the line.
 
************** External Commands **************************
In Vim it's easy to include the output of external commands in to file.
!command, the output will be shown in prompt.

To insert the output of the external command in the current file
type :r!command for example
Exampel - :r!date
 
********************** Editing a Stream ****************
find . | vim -
 
Tips At Command line -
***************************************************

test -f ~/.git-completion.bash && . $_

Note: $_ means the last argument to the previous command. so . $_ means run it - "it" being .git-completion.bash in this case


************** Completion ************************

Ctrl+p word completion .
Ctrl+x Ctrl+l whole line completion.
Ctrl+x Ctrl+k to do a dictionary lookup for the already typed characters.
Ctrl+x Ctrl+f to print the filename is vim.

*********************** Inventing Case *****************
~ :changes the lower case to upper case of current character
~guu :change current line from upper to lower.
~gUU :Change current LINE from lower to upper.
~guw :Change current WORD from upper to lower.
~gUw :Change current WORD from lower to upper.
g~~ :Invert case to entire line

********************** Line num *****************
:lineno goes to line in execution mode
:.= gives current cursor position of line
:= total no of lines in file
Ctrl+h acts as a backspace in insert mode

shift + 9 goes to sentence starting point in backward
shift + 0 goes to sentence starting point in forward
:e is used for editing another file with out quiting the vim editor cltrl+^ is used to toggle between the two files.
:syn on command in vimrc file will highlight the syntax during inserting the contents in program.

*************************** Man page *************
K (Shift+k) will diplays the man page of current word under the cursor


******** Splitting Windows **************************
:sp will split the window
:q to quit from current split window
Crtl+ww navigate through another file
:bnext (or :bn) go to next buffer
:bprev (or :bp) go to previous buffer
:bd delete a buffer (close a file)
Ctrl+ws Split windows
Ctrl+ww Switch between windows
Ctrl+wq Quit a window
Ctrl+wv Split windows vertically.


vim: list all matching lines
****************************


1. :vimgrep pattern %  --> To open the list of matches in a buffer: :copen

Note : Use <Up> and <Down> keys to navigate the list, <Enter> to select a match. Traverse the matches in the open file using <n> and <N> the regular way.

2.  :lvim pattern %  To open the list :lopen


3. :g/ERROR

	For the opposite: :g!/Error  or :v/Error 

	:vimgrep /something/g % | copen


vim: Fuzzy Search 
***************

use CTRl -P
	

Highlight search matches
****************************************************

:set ignorecase - case insensitive
:set smartcase  - use case if any caps used 
:set incsearch  - show match as search proceeds
:set hlsearch   - search highlighting

:noh -- removed the highlighting 

*               - search for word currently under cursor
g*              - search for partial word under cursor 
                  (repeat with n)
ctrl-o, ctrl-i  - go through jump locations
[I              - show lines with matching word under cursor


" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

Move to the first match (ggn), 
						last (GN),
						next (n) 
						previous (N) as usual.
:%s/old/new/g : replace all old with new throughout file
:%s/old/new/gc : replace all old with new throughout file with confirmations

Note : We can change the substitution delimiter instead of "/" to % or # or @ or !.

:/pattern/= => Print the line number of the first line that matches pattern.
:g/pattern => Finds (moves to) the last occurrence of pattern in the file.
:g/pattern/p => Finds and displays all lines in the file containing pattern.
:g!/pattern/nu => Finds and displays all lines in the file that don't contain pattern;
:60,124g/pattern/p => Finds and displays any lines between lines 60 and 124 containing pattern						



3. execute command in a shell within vi

:!command  example ---> :!pwd

:1,$!sort -- > sort lines 1 throught the end of file($)

:1,$!awk '{print $1}' | sort | tr [:lower:] [:upper:]  ---> alternatively 


Section save  in vi editor 
****************
:6,9w >> /tmp/newfile


search and replace in VIM :
**************************************************
:%s/^\(Martin\)/Mr \1 Wicks/g --> substitute the string starting with martin with mr martin.

# http://vim.wikia.com/wiki/Search_and_replace

%s/foo/bar/g 						##Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.

:s/foo/bar/g						##Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'. 

:%s/foo/bar/gc						##Change each 'foo' to 'bar', but ask for confirmation first.

:%s/\<foo\>/bar/gc					##Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation. 

:%s/foo/bar/gci						##Change each 'foo' (case insensitive due to the i flag) to 'bar'; ask for confirmation. 
									:%s/foo\c/bar/gc is the same because \c makes the search case insensitive. 
									This may be wanted after using :set noignorecase to make searches case sensitive (the default). 

:%s/foo/bar/gcI						##Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation. 
										:%s/foo\C/bar/gc is the same because \C makes the search case sensitive. 
									This may be wanted after using :set ignorecase to make searches case insensitive. 

									:s/foo/bar/g 	Change each 'foo' to 'bar' in the current line.
:%s/foo/bar/g 						#Change each 'foo' to 'bar' in all the lines.
:5,12s/foo/bar/g 					Change each 'foo' to 'bar' for all lines from line 5 to line 12 (inclusive).
:'a,'bs/foo/bar/g 					Change each 'foo' to 'bar' for all lines from mark a to mark b inclusive (see Note below).
:'<,'>s/foo/bar/g 					When compiled with +visual, change each 'foo' to 'bar' for all lines within a visual selection. Vim automatically appends the visual selection range ('<,'>) for any ex command when you select an area and enter :. Also, see Note below.
:.,$s/foo/bar/g 					Change each 'foo' to 'bar' for all lines from the current line (.) to the last line ($) inclusive.
:.,+2s/foo/bar/g 					Change each 'foo' to 'bar' for the current line (.) and the two next lines (+2).
:g/^baz/s/foo/bar/g 				Change each 'foo' to 'bar' in each line starting with 'baz'.





